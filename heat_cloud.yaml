heat_template_version: 2014-10-16

description: >
  The sole purpose of this template is to provision SaltCloud infrastracture.
  It's been tested on OpenStack Juno.

parameters:
  image:
    type: string
    description: Image for any node
    # default: TestVM
    default: ubuntu-xenial-server-cloudimg

  flavor:
    type: string
    description: Flavor for any node
    default: m1.small

  key:
    type: string
    description: Key for any node
    default: salt_cloud

  public_net_id:
    type: string
    description: Public network
    default: 095f43ed-65ba-48ce-8185-d4080e430a88

  dns_server:
    type: string
    description: DNS server name
    default: 172.18.208.44

  salt_master_floating_id:
    type: string
    description: Floating IP for Salt master
    default: b18561ef-884a-43e1-87c8-f6af0da1bfd3

  salt_db_floating_id:
    type: string
    description: Floating IP for DB
    default: c29a49d9-e201-4cd3-b541-17e1f00185ce

  salt_front_floating_id:
    type: string
    description: Floating IP for Frontend
    default: fad39c9e-f349-4451-bdd2-70a227986b91

  salt_tank_floating_id:
    type: string
    description: Floating IP for Yandex Tank Machine
    default: da7f8328-227e-44a2-9943-5061766a7811

  params.salt.root:
    type: string
    description: Path to SaltStack configuration DB
    default: /home/ubuntu/SaltCloud

resources:
  # Common
  salt-network:
    type: OS::Neutron::Net
    properties:
      name: salt-net

  salt-network-subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: salt-network }
      cidr: 172.17.0.0/27
      gateway_ip: 172.17.0.1
      dns_nameservers:
        - { get_param: dns_server }

      allocation_pools:
        - start: 172.17.0.2
          end: 172.17.0.30

  salt-network-router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }

  salt-network-router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: salt-network-router }
      subnet_id: { get_resource: salt-network-subnet }

  #
  # *** Cloud init configuration
  #
  cloud_config.common:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        write_files:
          - path: /home/ubuntu/.vimrc
            content: 'set modeline'
          - path: /etc/apt/sources.list.d/saltstack.list
            content: 'deb http://repo.saltstack.com/apt/ubuntu/16.04/amd64/latest xenial main'
        runcmd:
          - 'wget -O - https://repo.saltstack.com/apt/ubuntu/16.04/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add -'
          - 'apt-get update'


  cloud_config.salt.master:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        runcmd:
          - 'apt-get install -y git salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api python-raet'
          - str_replace:
              template: 'git clone https://github.com/Paulche/SaltCloud.git $salt_root'
              params:
                $salt_root: { get_param: params.salt.root }
          - str_replace:
              template: 'cd $salt_root && git submodule update --init --recursive'
              params:
                $salt_root: { get_param: params.salt.root }

        write_files:
          - path: '/etc/salt/master.d/global.conf'
            content:
              str_replace:
                template: |
                  auto_accept: True
                  failhard: True
                  transport: raet

                  file_roots:
                    base:
                      - $salt_root/salt/state
                      - $salt_root/salt/formula
                  pillar_roots:
                    base:
                      - $salt_root/salt/pillar
                params:
                  $salt_root: { get_param: params.salt.root }

  cloud_config.salt.master.restart:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        runcmd:
          - 'service salt-master restart'

  cloud_config.salt.minion:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        runcmd:
          - 'apt-get install -y salt-minion python-raet'
        write_files:
          - path: '/etc/salt/minion.d/global.conf'
            content: |
              master: master.salt.eu.mcloud.chechetin.net
              transport: raet

  cloud_config.salt.minion.restart:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        runcmd:
          - |
              until salt-call -t1 --retcode-passthrough status.ping_master master.salt.eu.mcloud.chechetin.net; do
                sleep 5

                service salt-minion restart
              done
  #
  # Salt master
  #
  salt-master-security-group:
    type: OS::Neutron::SecurityGroup
    properties:
      # description: Add security group rules for server
      name: salt-master-sec-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

        # SaltStack Master ZeroMQ TCP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 4505
          port_range_max: 4505

        # SaltStack Master RAET UDP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 4506
          port_range_max: 4506

        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  instance.master:
    type: OS::Nova::Server
    properties:
      name: SaltMaster
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: salt-master-port }
      user_data_format: RAW
      user_data: { get_resource: cloud_config.aggr.master }

  cloud_config.hostname.master:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        hostname: master
        fqdn: master.salt.eu.mcloud.chechetin.net
        manage_etc_hosts: true

  cloud_config.aggr.master:
      type: OS::Heat::MultipartMime
      properties:
        parts:
          - config: { get_resource: cloud_config.hostname.master }
          - config: { get_resource: cloud_config.common }
          - config: { get_resource: cloud_config.salt.master }
          - config: { get_resource: cloud_config.salt.master.restart }
          - config: { get_resource: cloud_config.salt.minion }
          - config: { get_resource: cloud_config.salt.minion.restart }

  salt-master-port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: salt-network }
      fixed_ips:
        - subnet: { get_resource: salt-network-subnet }
      security_groups:
        - { get_resource: salt-master-security-group }

  salt-master-association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: salt_master_floating_id }
      port_id: { get_resource: salt-master-port}

  #
  # DB
  #
  salt-db-security-group:
    type: OS::Neutron::SecurityGroup
    properties:
      # description: Add security group rules for server
      name: salt-db-sec-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

        # Postgres
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 5432
          port_range_max: 5432

        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  instance.db:
    type: OS::Nova::Server
    depends_on: instance.master
    properties:
      name: SaltDB
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: salt-db-port }
      user_data_format: RAW
      user_data: { get_resource: cloud_config.aggr.db }

  cloud_config.hostname.db:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        hostname: db
        fqdn: db.salt.eu.mcloud.chechetin.net
        manage_etc_hosts: true

  cloud_config.aggr.db:
      type: OS::Heat::MultipartMime
      properties:
        parts:
          - config: { get_resource: cloud_config.hostname.db }
          - config: { get_resource: cloud_config.common }
          - config: { get_resource: cloud_config.salt.minion }
          - config: { get_resource: cloud_config.salt.minion.restart }

  salt-db-port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: salt-network }
      fixed_ips:
        - subnet: { get_resource: salt-network-subnet }
      security_groups:
        - { get_resource: salt-db-security-group }

  salt-db-association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: salt_db_floating_id }
      port_id: { get_resource: salt-db-port}

  #
  # Front
  #
  salt-front-security-group:
    type: OS::Neutron::SecurityGroup
    properties:
      # description: Add security group rules for server
      name: salt-front-sec-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

        # HTTP & HTTPS
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80

        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443

        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  instance.front:
    type: OS::Nova::Server
    depends_on: instance.master
    properties:
      name: SaltFront
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: salt-front-port }
      user_data_format: RAW
      user_data: { get_resource: cloud_config.aggr.front }

  cloud_config.hostname.front:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        hostname: front
        fqdn: front.salt.eu.mcloud.chechetin.net
        manage_etc_hosts: true

  cloud_config.aggr.front:
      type: OS::Heat::MultipartMime
      properties:
        parts:
          - config: { get_resource: cloud_config.hostname.front }
          - config: { get_resource: cloud_config.common }
          - config: { get_resource: cloud_config.salt.minion }
          - config: { get_resource: cloud_config.salt.minion.restart }


  salt-front-port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: salt-network }
      fixed_ips:
        - subnet: { get_resource: salt-network-subnet }
      security_groups:
        - { get_resource: salt-front-security-group }

  salt-front-association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: salt_front_floating_id }
      port_id: { get_resource: salt-front-port}
  #
  # Tank
  #
  salt-tank-security-group:
    type: OS::Neutron::SecurityGroup
    properties:
      # description: Add security group rules for server
      name: salt-tank-sec-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  instance.tank:
    type: OS::Nova::Server
    depends_on: instance.master
    properties:
      name: SaltTank
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: salt-tank-port }
      user_data_format: RAW
      user_data: { get_resource: cloud_config.aggr.tank }

  cloud_config.hostname.tank:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        hostname: tank
        fqdn: tank.salt.eu.mcloud.chechetin.net
        manage_etc_hosts: true

  cloud_config.aggr.tank:
      type: OS::Heat::MultipartMime
      properties:
        parts:
          - config: { get_resource: cloud_config.hostname.tank }
          - config: { get_resource: cloud_config.common }
          - config: { get_resource: cloud_config.salt.minion }
          - config: { get_resource: cloud_config.salt.minion.restart }

  salt-tank-port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: salt-network }
      fixed_ips:
        - subnet: { get_resource: salt-network-subnet }
      security_groups:
        - { get_resource: salt-front-security-group }

  salt-tank-association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: salt_tank_floating_id }
      port_id: { get_resource: salt-tank-port}

# outputs:
#   salt-master-private-ip:
#     description: IP address of salt-master in private network
#     value: { get_attr: [instance.master, first_address] }
